name: Deploy to Kubernetes

on:
  push:
    branches:
      - main
  workflow_dispatch:
    

jobs: 
    build-and-push-api:
        runs-on: arc-runner-set-order
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v2
              with:
                registry: ghcr.io
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}

            - name: Setup dotnet
              uses: actions/setup-dotnet@v4
              env:
                DOTNET_INSTALL_DIR: "./.dotnet"
              with:
                dotnet-version: | 
                    9.0.x

            - name: Publish API
              run: |
                cd ./src/Kawa.OrderService.Api/
                dotnet publish --os linux --arch x64 -c Release /t:PublishContainer

            - name: Clean Solution
              run: |
                dotnet clean ./order-service.sln

            - name: Publish Migrations Service
              run: |
                cd ./src/Kawa.OrderService.MigrationsService/
                dotnet publish --os linux --arch x64 -c Release /t:PublishContainer
    
    create-secrets:
        needs: build-and-push-api
        runs-on: arc-runner-set-order
        container:
          image: bitnami/kubectl:latest
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
        steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Set up Kubeconfig
          run: |
            echo "${{ secrets.KUBECONFIG }}" > $KUBECONFIG

        - name: Create registry secret
          run: |
            kubectl create secret docker-registry ghcr-io-secret \
              --docker-server=ghcr.io \
              --docker-username=${{ github.actor }} \
              --docker-password=${{ secrets.TOKEN_REPO }} \
              --namespace=order-service \
              --dry-run=client -o yaml | kubectl apply -f -

        - name: Create App Secret
          run: |
            kubectl create secret generic order-service-app-secret \
              --from-literal=ASPNETCORE_ENVIRONMENT=Development \
              --from-literal=ConnectionStrings__order-service-db="${{ secrets.POSTGRES_CONNECTION_STRING }}" \
              --from-literal=ConnectionStrings__messaging="${{ secrets.RABBITMQ_CONNECTION_STRING }}" \
              --namespace=order-service \
              --dry-run=client -o yaml | kubectl apply -f -

    deploy-with-helm:
        needs: create-secrets
        runs-on: arc-runner-set-order
        container:
          image: alpine/helm:latest
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
        steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Set up Kubeconfig
          run: |
            echo "${{ secrets.KUBECONFIG }}" > $KUBECONFIG

        - name: Deploy Postgres 
          run: |
            helm upgrade --install postgres oci://registry-1.docker.io/bitnamicharts/postgresql \
              --namespace order-service \
              --create-namespace \
              --set auth.password="${{ secrets.POSTGRES_PASSWORD }}" \
              --set auth.postgresPassword="${{ secrets.POSTGRES_PASSWORD }}" \
              -f conf/postgres/values.yaml \
              --wait --atomic

        - name: Deploy Order Service
          run: |
            helm upgrade --install order-service conf/order-chart \
              --namespace order-service \
              -f conf/order-chart/values.yaml \
              --wait --atomic

    sonar-analysis:
        runs-on: arc-runner-set-order
        container:
          image: mcr.microsoft.com/dotnet/sdk:9.0
        env:
          DOTNET_INSTALL_DIR: "/usr/lib/dotnet"
        steps:
          - name: Checkout code
            uses: actions/checkout@v3

          - name: Dotnet tool restore
            run: dotnet tool restore

          - name: SonarCloud Scan
            run: |
              dotnet sonarscanner begin /k:"order-service" /o:"tenjustin" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="http://sonarqube-sonarqube.sonarqube-lts.svc.cluster.local:9000"
              dotnet build ./order-service.sln
              dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"